##################################################
#                                                #
#                    Overlord                    #
#        a proxy based high performance          #
#            Memcached&Redis solution            #
#                 written in Go                  #
#                                                #
##################################################
pprof = "0.0.0.0:2110"
debug = false
log = ""
log_lv = 0

[proxy]
# The read timeout value in msec that we wait for to receive a response from the client. By default, we wait indefinitely.
read_timeout = 0
# The write timeout value in msec that we wait for to write a response to the client. By default, we wait indefinitely.
write_timeout = 0
# proxy accept max connections from client. By default, we no limit.
max_connections = 0
# proxy support prometheus metrics. By default, we use it.
use_metrics = true
[clusters.connect_proxy.auth]
# If enable is true, the client will use AUTH <PASSWORD> to auth.
enable = true
# If use_tls is true, the client will use TLS to connect to the server. else use password to auth.
use_tls = false
# The path to the client certificate file.
cert_file = ""
# The path to the client key file.
key_file = ""
# The path to the certificate authority file.
ca_file = ""
# The path to the certificate revocation list file.
# Require clients to issue AUTH <PASSWORD> before processing any other commands.
password = ""
[clusters.connect_redis.auth]
# Require clients to issue AUTH <PASSWORD> before processing any other commands.
enable = true
# If use_tls is true, the client will use TLS to connect to the server. else use password to auth.
use_tls = false
# The path to the client certificate file.
cert_file = ""
# The path to the client key file.
key_file = ""
# The path to the certificate authority file.
ca_file = ""
# The path to the certificate revocation list file.
# Require clients to issue AUTH <PASSWORD> before processing any other commands.
password = ""